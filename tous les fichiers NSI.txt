# -*- coding: utf-8 -*-
"""
Created on Tue May 17 03:53:47 2022

@author: Matthis
"""

""" ATTENTION, ce document python regroupe seulement tous les programmes et 
toutes les fonctions que nous avont programmer (seulement le python, il n'y a 
rien sur l'HTML, le CSS, le PHP et SQL), donc le programme ne fonctionnera 
pas. Veuillez le télécharger sur notre site pour pouvoir y jouer.


Concernant le site, ne mettez en aucun cas le mail et encore moin le mot de passe 
que vous utilisez pour tous les jours, inventez un mot de passe et un mail sera 
beaucoup plus sûr."""


# =============================================================================
# PROGRAMME PRINCIPALE
# =============================================================================


# ================================= MODULES ===================================

from tkinter import *
from playsound import playsound
import time

from random import randint
from random import *

from boutons import *
from score import *
from pile_file import *
from scoreBDD import *


# ========================= CRÉATIONS DE LA FENETRE ===========================

MaFenetre=Tk()
MaFenetre.geometry('1920x1080')

# ======================== IMPORTATIONS DES IMAGES INTRO =======================

adresse_mail_image=PhotoImage(file="./images/images_menu/debut/mail.png")
presente_image=PhotoImage(file="./images/images_menu/debut/presente.png")
mauvais_mail=PhotoImage(file="./images/images_menu/mauvai_mail.png")
debut_image1=PhotoImage(file="./images/images_menu/debut/image1.png")
debut_image2=PhotoImage(file="./images/images_menu/debut/image2.png")
debut_image3=PhotoImage(file="./images/images_menu/debut/image3.png")
debut_image4=PhotoImage(file="./images/images_menu/debut/image4.png")
debut_image5=PhotoImage(file="./images/images_menu/debut/image5.png")
debut_image6=PhotoImage(file="./images/images_menu/debut/image6.png")
debut_image7=PhotoImage(file="./images/images_menu/debut/image7.png")
debut_image8=PhotoImage(file="./images/images_menu/debut/image8.png")
debut_image9=PhotoImage(file="./images/images_menu/debut/image9.png")
debut_image10=PhotoImage(file="./images/images_menu/debut/image10.png")
debut_image11=PhotoImage(file="./images/images_menu/debut/image11.png")
debut_image12=PhotoImage(file="./images/images_menu/debut/image12.png")
debut_image13=PhotoImage(file="./images/images_menu/debut/image13.png")
debut_image14=PhotoImage(file="./images/images_menu/debut/image14.png")
debut_image15=PhotoImage(file="./images/images_menu/debut/image15.png")
debut_image16=PhotoImage(file="./images/images_menu/debut/image16.png")
debut_image17=PhotoImage(file="./images/images_menu/debut/image17.png")

list_image_intro=[debut_image1, debut_image2, debut_image3, debut_image4, debut_image5, debut_image6, debut_image7, debut_image8,debut_image9,
               debut_image10,debut_image11, debut_image12,debut_image13, debut_image14, debut_image15, debut_image16,debut_image17]

# ======================== IMPORTATIONS DES IMAGES MENU =======================

fond_menu=PhotoImage(file="./images/images_menu/Menu_tele_no_signal.png")
fond_plato_om=PhotoImage(file="./images/images_menu/Menu_tele_operations_manuscrites.png")
fond_jeux_inexistant_1=PhotoImage(file="./images/images_menu/Menu_tele_jeux_inexistant_1.png")
fond_jeux_inexistant_2=PhotoImage(file="./images/images_menu/Menu_tele_jeux_inexistant_2.png")
fond_jeux_inexistant_3=PhotoImage(file="./images/images_menu/Menu_tele_jeux_inexistant_3.png")
fond_jeux_inexistant_4=PhotoImage(file="./images/images_menu/Menu_tele_jeux_inexistant_4.png")
fond_jeux_inexistant_5=PhotoImage(file="./images/images_menu/Menu_tele_jeux_inexistant_5.png")
fond_jeux_inexistant_6=PhotoImage(file="./images/images_menu/Menu_tele_jeux_inexistant_6.png")
fond_jeux_inexistant_7=PhotoImage(file="./images/images_menu/Menu_tele_jeux_inexistant_7.png")    
fond_jeux_inexistant_8=PhotoImage(file="./images/images_menu/Menu_tele_jeux_inexistant_8.png")
fond_jeux_inexistant_9=PhotoImage(file="./images/images_menu/RickAstley.png")

# ===================== IMPORTATIONS DES IMAGES JEUX 1 ========================

#plato

fond_jeux_1=PhotoImage(file="./images/image_jeux_1/plato_perso.png")
plato_lettre=PhotoImage(file="./images/image_jeux_1/eppreuve_lettre_v1.png")
bravo1=PhotoImage(file="./images/image_jeux_1/bravo_lettre.png")

#regles 

regles_questions=PhotoImage(file="./images/image_jeux_1/regles_questions.png")
regles=PhotoImage(file="./images/image_jeux_1/regles.png")


#random

epreuve_lettre=PhotoImage(file="./images/image_jeux_1/epreuve_l.png")
epreuve_ope=PhotoImage(file="./images/image_jeux_1/epreuve_o.png")
grise_case=PhotoImage(file="./images/image_jeux_1/grise2.png")

#opération
operation_jeux=PhotoImage(file="./images/image_jeux_1/operation_jeux.png")

#Attribution des points
vingcinq=PhotoImage(file="./images/image_jeux_1/25pts.png")
quinze=PhotoImage(file="./images/image_jeux_1/15pts.png")
dix=PhotoImage(file="./images/image_jeux_1/10pts.png")
cinqpts=PhotoImage(file="./images/image_jeux_1/5pts.png")
unpts=PhotoImage(file="./images/image_jeux_1/1pts.png")
zeropts=PhotoImage(file="./images/image_jeux_1/0pts.png")
mot_null=PhotoImage(file="./images/image_jeux_1/mot_null.png")

#Page final
final=PhotoImage(file="./images/image_jeux_1/fin.png")

# ============================== CLASS LETTRES ================================

# Importations Images lettres : 
    
a_image=PhotoImage(file="./images/image_jeux_1/lettres/A.png")
b_image=PhotoImage(file="./images/image_jeux_1/lettres/B.png")
c_image=PhotoImage(file="./images/image_jeux_1/lettres/C.png")
d_image=PhotoImage(file="./images/image_jeux_1/lettres/D.png")
e_image=PhotoImage(file="./images/image_jeux_1/lettres/E.png")
f_image=PhotoImage(file="./images/image_jeux_1/lettres/F.png")
g_image=PhotoImage(file="./images/image_jeux_1/lettres/G.png")
h_image=PhotoImage(file="./images/image_jeux_1/lettres/H.png")
i_image=PhotoImage(file="./images/image_jeux_1/lettres/I.png")
j_image=PhotoImage(file="./images/image_jeux_1/lettres/J.png")
k_image=PhotoImage(file="./images/image_jeux_1/lettres/K.png")
l_image=PhotoImage(file="./images/image_jeux_1/lettres/L.png")
m_image=PhotoImage(file="./images/image_jeux_1/lettres/M.png")
n_image=PhotoImage(file="./images/image_jeux_1/lettres/N.png")
o_image=PhotoImage(file="./images/image_jeux_1/lettres/O.png")
p_image=PhotoImage(file="./images/image_jeux_1/lettres/P.png")
q_image=PhotoImage(file="./images/image_jeux_1/lettres/Q.png")
r_image=PhotoImage(file="./images/image_jeux_1/lettres/R.png")
s_image=PhotoImage(file="./images/image_jeux_1/lettres/S.png")
t_image=PhotoImage(file="./images/image_jeux_1/lettres/T.png")
u_image=PhotoImage(file="./images/image_jeux_1/lettres/U.png")
v_image=PhotoImage(file="./images/image_jeux_1/lettres/V.png")
w_image=PhotoImage(file="./images/image_jeux_1/lettres/W.png")
x_image=PhotoImage(file="./images/image_jeux_1/lettres/X.png")
y_image=PhotoImage(file="./images/image_jeux_1/lettres/Y.png")
z_image=PhotoImage(file="./images/image_jeux_1/lettres/Z.png")

# =============================================================================
# Importation Chiffres
# =============================================================================

# un=PhotoImage(file="images/image_jeux_1/chiffres/1.png")
# deux=PhotoImage(file="images/image_jeux_1/chiffres/2.png")
# trois=PhotoImage(file="images/image_jeux_1/chiffres/3.png")
# quatre=PhotoImage(file="images/image_jeux_1/chiffres/4.png")
# cinq=PhotoImage(file="images/image_jeux_1/chiffres/5.png")
# six=PhotoImage(file="images/image_jeux_1/chiffres/6.png")
# sept=PhotoImage(file="images/image_jeux_1/chiffres/7.png")
# huit=PhotoImage(file="images/image_jeux_1/chiffres/8.png")
# neuf=PhotoImage(file="images/image_jeux_1/chiffres/9.png")

# ============================  Score initialisations =========================

Score = SCORE(0)
Score.ajouter_score()

# ===================================== TEST ==================================

# Définition des labels


# LabelResultat=Label(MaFenetre, textvariable = None , bg ="white",font=("Courier",60),width=3,height=1)

# =============================================================================
# ========================== FONCTIONS DU PROGRAMME ===========================
    
def menu():
    global can1, mail_text
    
    try :
        """on essaie de détruiles les labels si il y en a (evite les bugs) sinon on passe"""
        Labelscore.destroy()
    except :
        pass
    
    # On récupère le mail contenue dans le doc qui le stock
    file = open("./doc_txt/mail_joueur.txt", 'r')
    email = ""
    for elt in file :
        email = email + elt
    file.close()
    #
    
    # Si il y la phrase "empty_please_enter_value" dans le donc, on demande au joueur de mettre son mail. Sinon, on va chercher le score du joueur
    # en ligne
    if email == "empty_please_enter_value":
        can1.after(0, affiche_image(adresse_mail_image))
        
        mail_text = Entry(MaFenetre, bg ="bisque", fg="maroon",font=("Courier",40),justify="center")
        mail_text.focus_set()
        mail_text.place(x=145,y=825,width=1184, height=164)
        
        Bouton0 = bouton([1363, 825], [1832, 989], "Bouton0", None, "ajouter_mail()", None)
        pile_button.empiler(Bouton0)
        
    else :
        get_score_online()
        menu2()
    
def menu2():
    """ Fonction qui affiche le launcher, et initialise les boutons du menu """
    global can1, Bouton1, Bouton2, Bouton3, Bouton4, Bouton5, Bouton6, Bouton7,Bouton8, pile_button, bou1,cand_rep, compteur,Score
    
    # On essaie de détruire des labels si il y en a pour eviter des petits bugs. 
    try :
        mail_text.destroy()
    except :
        pass
    
    try :
        mail_text_cu.destroy()
    except :
        pass
    #
       
    Score = SCORE(0) # On établie le score du joueur a 0 (pour cette partie)

    # ====================== CRÉATIONS DES BOUTONS + LISTE ====================
    
    reset_pile_file(pile_button) #supprime tous les anciens boutons
    
    Bouton1 = bouton([1078, 284], [1117, 298], "Bouton1", fond_plato_om, "ecran_1()", None)
    Bouton2 = bouton([1078, 314], [1117, 324], "Bouton2",fond_jeux_inexistant_2, "ecran_2()", None)
    Bouton3 = bouton([1078, 339], [1117, 350], "Bouton3",fond_jeux_inexistant_3, "ecran_3()", None)
    Bouton4 = bouton([1078, 367], [1117, 379], "Bouton4",fond_jeux_inexistant_4,"ecran_4()", None)
    Bouton5 = bouton([1078, 394], [1117, 406], "Bouton5",fond_jeux_inexistant_5,"ecran_5()", None)
    Bouton6 = bouton([1078, 420], [1117, 432], "Bouton6",fond_jeux_inexistant_6,"ecran_6()", None)
    Bouton7 = bouton([1078, 447], [1117, 461], "Bouton7",fond_jeux_inexistant_7,"ecran_7()", None)
    Bouton8 = bouton([1078, 474], [1777, 489], "Bouton8",fond_jeux_inexistant_8,"change_user()", None)
    
    Bouton9 = bouton([1117, 541], [1154, 553], "Bouton9", fond_menu, "menu()", None)
    
    Bouton10 = bouton([1169, 544], [1202, 561],"Bouton10", None, "rick()", None)
    
    Bouton45=bouton([1298, 772],[1880, 968],"quitter",None,"MaFenetre.destroy()",None)
    
    pile_button.empiler(Bouton1)
    pile_button.empiler(Bouton2)
    pile_button.empiler(Bouton3)
    pile_button.empiler(Bouton4)
    pile_button.empiler(Bouton5)
    pile_button.empiler(Bouton6)
    pile_button.empiler(Bouton7)
    pile_button.empiler(Bouton8)
    pile_button.empiler(Bouton9)
    pile_button.empiler(Bouton10)
    pile_button.empiler(Bouton45)
    
    #=========================== MISE EN PLACE FOND ===========================
    
    image_fond=can1.create_image(0,0,image=fond_menu,anchor="nw") #set-up de la premiere iage a afficher

def ecran_1():
    '''fonction pour jouer au jeux 1 : Opérations manuscrite'''
    
    image_fond=can1.create_image(0,0,image=fond_plato_om,anchor="nw")
    
    Bouton11 = bouton([282, 633], [895, 759], "Bouton11", None, "jeux_1_init()", None)
    pile_button.empiler(Bouton11)
    
# =================================   JEUX 1   ================================

def jeux_1_init():
    '''initialisation du jeux1 -> mise en route (regles)'''
    global Labelscore, pile_button
    
    reset_pile_file(pile_button)
    
    can1.after(0,affiche_image(fond_jeux_1))
    can1.update()
    
    score1 = StringVar()
    Labelscore = Label(MaFenetre, textvariable = score1 , bg ="lightblue",font=("Courier",60),width=3,height=1)
    score1.set(Score.get_score())
    Labelscore.place(x=1596,y=45)
    Labelscore.destroy()
    
    can1.after(0,affiche_image(regles_questions))
    can1.update()
    
    reset_pile_file(pile_button) # On supprime tous les anciens boutons 

    # Initialisation bouton
    Bouton_arret=bouton([1541, 51],[1899, 165],"Arreter",None,"fin_du_jeu()",None)
    pile_button.empiler(Bouton_arret)

    Bouton12 = bouton([582, 750],[922, 918],"Bouton12",None,"jeux_1_regles()",None)
    pile_button.empiler(Bouton12) 
    
    Bouton13 = bouton([978, 750],[1318, 918],"Bouton13",None,"jeux_1()",None)
    pile_button.empiler(Bouton13)
    #
    
def jeux_1_regles():
    '''fonction qui permet d'afficher les règles du jeux 1'''
    
    reset_pile_file(pile_button)
    
    can1.after(0,affiche_image(regles)) #mise en place de l'image avec les règles
   
    #bouton arreter
    Bouton_arret=bouton([86,780],[440, 888],"Arreter",None,"fin_du_jeu()",None)
    pile_button.empiler(Bouton_arret)
    #
    #bouton commencer :
    Bouton50 = bouton([665, 890], [1250, 1020], 'Bouton50', None, 'jeux_1()', None)
    pile_button.empiler(Bouton50)
    #

def jeux_1():
    global pile_button,compteur,cand_rep,Labelscore
    
    reset_pile_file(pile_button) #supprime tous les boutons
    
    Labelscore.destroy() #suppression d'un label
    
    # Ajout bouton d'arrêt
    Bouton_arret=bouton([1541, 51],[1899, 165],"Arreter",None,"fin_du_jeu()",None)
    pile_button.empiler(Bouton_arret)
    #
    
    '''fonction qui choisit aléatoirement entre : jeux opés / jeux lettres'''
    
    a=randint(0,1) 
    if a == 0 : # si a == 0 -> lettres 
        can1.after(0, jeux_1_lettres())
        can1.update()
    else : #sinon -> opés
        can1.after(0, jeux_1_operations())
        can1.update()

# Partie LETTRES

def jeux_1_lettres():
    '''fonction qui permet de jouer au mini jeux de lettre'''
    global pile_button, l_mot_trouver, pile_button #, lettre0, lettre1, lettre2, lettre3, lettre4, lettre5, lettre6, lettre7, lettre8, lettre9
    
    # print("========================== ENTRE DANS JEU_1_lettres =======================")
    
    #on réinitialise la pile_button, pour supprimer tous les précédent boutons
    reset_pile_file(pile_button)
    
    
    Bouton_arret=bouton([1541, 51],[1899, 165],"Arreter",None,"fin_du_jeu()",None)
    pile_button.empiler(Bouton_arret)
    
    # mise en place des images  de fond de base :
    can1.after(2000,affiche_image(epreuve_lettre))
    can1.update()
    can1.after(2000,affiche_image(plato_lettre))
    can1.update()
    
    # =============================================================================
    # Créations du mot
    # =============================================================================
    
    # On détermine quelle mot les joueurs devront trouver :
    l_mot_trouver=melange()
    l_mot_trouver
    
    jeux_1_lettre_2()
    
def jeux_1_lettre_2():                  
    
    global dico_ltr_img, dico_ltr_img_coord, compteur, cand_rep,pile_button, dico_ltr_to_modify_image

    # On initialise des variables pour stocker les réponses
    compteur = 1
    cand_rep=[]
    #
    
    reset_pile_file(pile_button)
    
  
    # =============================================================================
    # Mise en place images des images des lettres
    # =============================================================================
    
    lettre1 = can1.create_image(149,772, anchor='nw', image=quelle_lettre(str(l_mot_trouver[0][0])))
    lettre2 = can1.create_image(271,774, anchor='nw', image=quelle_lettre(str(l_mot_trouver[1][0])))
    lettre3 = can1.create_image(390,773, anchor='nw', image=quelle_lettre(str(l_mot_trouver[2][0])))
    lettre4 = can1.create_image(511,773, anchor='nw', image=quelle_lettre(str(l_mot_trouver[3][0])))
    lettre5 = can1.create_image(632,773, anchor='nw', image=quelle_lettre(str(l_mot_trouver[4][0])))
    lettre6 = can1.create_image(753,773, anchor='nw', image=quelle_lettre(str(l_mot_trouver[5][0])))
    lettre7 = can1.create_image(873,773, anchor='nw', image=quelle_lettre(str(l_mot_trouver[6][0])))
    lettre8 = can1.create_image(993,773, anchor='nw', image=quelle_lettre(str(l_mot_trouver[7][0])))
    lettre9 = can1.create_image(1115,773, anchor='nw', image=quelle_lettre(str(l_mot_trouver[8][0])))
    lettre10 = can1.create_image(1236,773, anchor='nw', image=quelle_lettre(str(l_mot_trouver[9][0])))
    
    dico_ltr_img = {'lettre1' : lettre1, 'lettre2' : lettre2, 'lettre3' : lettre3, 'lettre4' : lettre4,
                    'lettre5' : lettre5, 'lettre6' : lettre6, 'lettre7' : lettre7, 'lettre8' : lettre8,
                    'lettre9' : lettre9, 'lettre10' : lettre10}
    
    dico_ltr_img_coord = {'coord1' : [149, 772], 'coord2' : [271,774], 'coord3' : [390,773], 'coord4' : [511,773],
                    'coord5' : [632,773], 'coord6' : [753,773], 'coord7' : [873,773], 'coord8' : [993,773],
                    'coord9' : [1115,773], 'coord10' : [1236,773]}
    
    dico_ltr_to_modify_image = {'lettre1' : quelle_lettre(str(l_mot_trouver[0][0])), 'lettre2' : quelle_lettre(str(l_mot_trouver[1][0])),
                                'lettre3' : quelle_lettre(str(l_mot_trouver[2][0])), 'lettre4' : quelle_lettre(str(l_mot_trouver[3][0])),
                                'lettre5' : quelle_lettre(str(l_mot_trouver[4][0])), 'lettre6' : quelle_lettre(str(l_mot_trouver[5][0])),
                                'lettre7' : quelle_lettre(str(l_mot_trouver[6][0])), 'lettre8' : quelle_lettre(str(l_mot_trouver[7][0])),
                                'lettre9' : quelle_lettre(str(l_mot_trouver[8][0])), 'lettre10' : quelle_lettre(str(l_mot_trouver[9][0]))}
    
    # Création des cases grises du bas 
    for i in range(1,11) :
        xn = dico_ltr_img_coord[('coord'+str(i))][0]
        yn = int(dico_ltr_img_coord[('coord'+str(i))][1])+156
        case_vide = can1.create_image(xn,yn , anchor='nw', image=grise_case)
    
    # =============================================================================
    # Créations boutons lettres + Ajout des boutons dans la liste pour ceux ci
    # =============================================================================
    
    global Bouton14, Bouton15, Bouton16, Bouton17, Bouton18, Bouton19, Bouton20, Bouton21, Bouton22, Bouton23
    
    Bouton14 = bouton([149, 772], [249, 874], "Bouton14", "lettre1", 'Make_Rep("'+l_mot_trouver[0][0]+'", "Bouton14")', l_mot_trouver[0][0])
    Bouton15 = bouton([269, 772], [371, 874], "Bouton15", "lettre2", 'Make_Rep("'+l_mot_trouver[1][0]+'", "Bouton15")', l_mot_trouver[1][0])
    Bouton16 = bouton([389, 772], [493, 874], "Bouton16", "lettre3", 'Make_Rep("'+l_mot_trouver[2][0]+'", "Bouton16")', l_mot_trouver[2][0])
    Bouton17 = bouton([509, 772], [615, 874], "Bouton17", "lettre4", 'Make_Rep("'+l_mot_trouver[3][0]+'", "Bouton17")', l_mot_trouver[3][0])
    Bouton18 = bouton([629, 772], [737, 874], "Bouton18", "lettre5", 'Make_Rep("'+l_mot_trouver[4][0]+'", "Bouton18")', l_mot_trouver[4][0])
    Bouton19 = bouton([749, 772], [859, 874], "Bouton19", "lettre6", 'Make_Rep("'+l_mot_trouver[5][0]+'", "Bouton19")', l_mot_trouver[5][0])
    Bouton20 = bouton([869, 772], [981, 874], "Bouton20", "lettre7", 'Make_Rep("'+l_mot_trouver[6][0]+'", "Bouton20")', l_mot_trouver[6][0])
    Bouton21 = bouton([989, 772], [1103, 874], "Bouton21", "lettre8", 'Make_Rep("'+l_mot_trouver[7][0]+'", "Bouton21")', l_mot_trouver[7][0])
    Bouton22 = bouton([1109, 772], [1225, 874], "Bouton22", "lettre9", 'Make_Rep("'+l_mot_trouver[8][0]+'", "Bouton22")', l_mot_trouver[8][0])
    Bouton23 = bouton([1229, 772], [1347, 874], "Bouton23", "lettre10", 'Make_Rep("'+l_mot_trouver[9][0]+'", "Bouton23")', l_mot_trouver[9][0])
    
    pile_button.empiler(Bouton14)
    pile_button.empiler(Bouton15)
    pile_button.empiler(Bouton16)
    pile_button.empiler(Bouton17)
    pile_button.empiler(Bouton18)
    pile_button.empiler(Bouton19)
    pile_button.empiler(Bouton20)
    pile_button.empiler(Bouton21)
    pile_button.empiler(Bouton22)
    pile_button.empiler(Bouton23)
    
    # =============================================================================
    # Bouton 'valider'
    # =============================================================================
    
    Bouton24 = bouton([1446, 839], [1809, 956], "om_lettre ---- VALIDER", None, 'est_mot()', None)
    pile_button.empiler(Bouton24)
    
    # =============================================================================
    # Bouton Arret jeu 
    # =============================================================================
    
    Bouton_arret=bouton([1541, 51],[1899, 165],"Arreter",None,"fin_du_jeu()",None)
    pile_button.empiler(Bouton_arret)
    
    # =============================================================================
    # Bouton 'reset'
    # =============================================================================
    
    Bouton25 = bouton([134, 921], [1350, 1033], "RESET", None, 'retire_elt_rep()', None)
    pile_button.empiler(Bouton25)

def Make_Rep(t_lettre:str, bouton_mk:str):
    global cand_rep, cand_rep_str,pile_button, tempo, pile_supp
    
    '''on donne un str et un bouton qui sont envoyer dans différente fonction'''
    
    but_ltr_img(pile_button, bouton_mk) # Creer une nouvelle image sur la barre en dessous
    cand_rep.append(str(t_lettre)) # Ajoute t_lettre dans la reponse du joueur
    supp_bou_liste(pile_button, bouton_mk)  # Supprime le bouton cliqué par le joueur
    pile_supp.empiler(bouton_mk) # On ajoute le bouton cliqué a une pile secondaire pour le garder en mémoire
    cand_rep_str = lst_to_str(cand_rep)
    
    
def but_ltr_img(pile:list, bouton_dle:str):
    global compteur, temorary_memory, pile_supp_2
    
    """ Fonction qui permet de déplacer toutes les images, vers le bas quand on click dessus. """
    
    Pile2 = Pile()
    Pile_res = Pile()
    
    while pile.vide() != True :
        n = pile.depiler()
        Pile2.empiler(n)
        Pile_res.empiler(n)
    while Pile_res.vide() != True :
        m = Pile_res.depiler()
        pile_button.empiler(m)
        
    while Pile2.vide() != True:
        temp_memory = Pile2.depiler()
        if temp_memory.get_nom() == str(bouton_dle) :
            
            can1.itemconfig(dico_ltr_img[temp_memory.get_image()], image=grise_case)
            
            x1 = dico_ltr_img_coord[('coord'+str(compteur))][0]
            y1 = int(dico_ltr_img_coord[('coord'+str(compteur))][1])+156
            
            nvl_image = quelle_lettre(str(temp_memory.get_lettre()))
            nvll_lettre = can1.create_image(x1,y1 , anchor='nw', image=nvl_image)
            pile_supp_2.empiler(nvll_lettre)
            compteur = compteur + 1 


def quelle_lettre(lettre:str):
    """fonction qui permet de savoir quelle image de lettre afficher en label"""
    dico = {'a' :a_image, 'b' :b_image, 'c' :c_image, 'd' :d_image, 'e' :e_image, 'f' :f_image, 'g' :g_image, 'h' :h_image, 'i' :i_image, 'j' :j_image, 'k' :k_image, 'l' :l_image, 'm' :m_image, 'n' :n_image, 'o' :o_image, 'p' :p_image, 'q' :q_image, 'r' :r_image, 's' :s_image, 't' :t_image, 'u' :u_image, 'v' :v_image, 'w' :w_image, 'x' :x_image, 'y' :y_image, 'z' :z_image}
    return(dico[lettre])
    
def melange():
    """fonction qui prend un mot aléatoire dans la liste des 
    mots de dix lettres puis qui mélange l'ordre des lettres"""
    
    liste=[]
    nv_mot=[]
    with open("doc_txt/10_liste6.txt", "r") as tf:
        lines = tf.read().split('\n')
    for elt in lines:
        liste.append(elt)
        mot=choice(liste)
    for elti in mot:
        nv_mot.append(elti.split())
    print(nv_mot)
    shuffle(nv_mot)
    return(nv_mot)




def retire_elt_rep():
    """fonction qui permet de rendre un bouton de reponse (lettre) de nouveau actif"""
    
    global cand_rep, dico_ltr_bouton, compteur
    assert len(cand_rep) > 0
    
    # Étape 1 : supprimer la derniere lettre ajouter dans le mot du joueur
    
    cand_rep.pop()
        
    #Étape 2 : Re mettre le bouton en services, réajouter son image
    
    dico_ltr_bouton = {'Bouton14' : Bouton14, 'Bouton15' : Bouton15, 'Bouton16' : Bouton16, 'Bouton17' : Bouton17,
                    'Bouton18' : Bouton18, 'Bouton19' : Bouton19, 'Bouton20' : Bouton20, 'Bouton21' : Bouton21,
                    'Bouton22' : Bouton22, 'Bouton23' : Bouton23}
    
    tempo = pile_supp.depiler()
    can1.itemconfig(dico_ltr_img[dico_ltr_bouton[tempo].get_image()], image=dico_ltr_to_modify_image[dico_ltr_bouton[tempo].get_image()])
    
    pile_button.empiler(dico_ltr_bouton[tempo])
    
    compteur = compteur-1
    
    #Étape 3 : Modifier l'image qui a été déplacer en bas 
    tempo2 = pile_supp_2.depiler()
    can1.itemconfig(tempo2, image=grise_case)
    
    return cand_rep_str




def lst_to_str(liste_mot:list):
    """transforme les éléments d'une liste donnés en STR"""
    mot=''
    for elt in liste_mot :
        mot = mot + elt
    return(mot)

def est_mot():
    """fonction qui vérifie si le mot que le candidats a répondu est bon"""
    global pile_button, cand_rep_str
    #print(cand_rep_str)
    n=0
    cand_rep_str = cand_rep_str + str("\n")
    lst_fr = open("./doc_txt/liste_francais.txt", 'r')
    for elt in lst_fr:
        if elt == cand_rep_str:
            n+=1
            score_chiffre()
            return(True)
    can1.after(0, affiche_image(mot_null))   
    can1.update()
    can1.after(1500,affiche_image(plato_lettre))
    can1.update()
    can1.after(0, jeux_1_lettre_2())

def score_chiffre():
    """Cette fonction permet de vérifier la réponse afin d'attribuer le score adéquat"""
    global cand_rep_str,score,pile_button
    reset_pile_file(pile_button)
    Bouton_arret=bouton([1541, 51],[1899, 165],"Arreter",None,"fin_du_jeu()",None)
    pile_button.empiler(Bouton_arret)
    if len(cand_rep_str)-1==10:  #on vérifie si le mot fait 10 lettres
        can1.after(0,affiche_image(vingcinq))
        can1.update()
        Score.set_score(25)
        actualise_score(Score)
    elif len(cand_rep_str)-1<10 and len(cand_rep_str)-1>8:  #on vérifie si le mot fait entre 8 et 10 lettres
        can1.after(0,affiche_image(quinze))
        can1.update()
        Score.set_score(15)
        actualise_score(Score)
    elif len(cand_rep_str)-1<=8 and len(cand_rep_str)-1>6:  #on vérifie si le mot fait entre 6 et 8 lettres
        can1.after(0,affiche_image(dix))
        can1.update()
        Score.set_score(10)
        actualise_score(Score)
    elif len(cand_rep_str)-1<=6 and len(cand_rep_str)-1>4: #on vérifie si le mot fait entre 4 et 6 lettres
        can1.after(0,affiche_image(cinqpts))
        can1.update()
        Score.set_score(5)
        actualise_score(Score)
    elif len(cand_rep_str)-1<=4: #on vérifie si le mot fait moins de 4 lettres
        can1.after(0,affiche_image(unpts))
        can1.update()
        Score.set_score(1)
        actualise_score(Score)

def actualise_score(score):
    """Cette fonction permet d'actualiser le score afficher à l'écran"""
    global Labelscore
    #Etape 1 : on crée un objet de type string que l'on associe ensuite à un Label crée
    score1 = StringVar()
    Labelscore = Label(MaFenetre, textvariable = score1 , bg ="white",font=("Courier",60),width=13,height=2)
    #Etape 2 : on définit la valeur de la variable crée précédemment puis on l'affiche
    score1.set(Score.get_score())
    Labelscore.place(x=915,y=785)
    can1.update()
    can1.after(2000,jeux_1())
    can1.update()

    
# =============================================================================
# Jeux des opérations
# =============================================================================


def jeux_1_operations():
    """Cette fonction initialise le jeu des opérations"""
    global pile_buttonLabelscore
    reset_pile_file(pile_button)
    Labelscore.destroy()
    can1.after(2000,affiche_image(epreuve_ope))
    can1.update()
    can1.after(0,operation())
    can1.update()

def kill_label():
    """Cette fonction détruit tous les labels mentionnés ci-dessous grâce à la méthode destroy()"""
    global Champ1,pile_button,LabelResultat,LabelResultat2,LabelResultat3,LabelResultat4
    Champ1.destroy()
    LabelResultat.destroy()
    LabelResultat2.destroy()
    LabelResultat3.destroy()
    LabelResultat4.destroy()
    can1.update()
    can1.after(0,fin_du_jeu)
    can1.update()    

def operation():
    """Cette fonction permet d'afficher les labels du calculs et de pouvoir écrire sa réponse dans un champs de saisie"""
    global operation1,LabelResultat,LabelResultat2,LabelResultat3,LabelResultat4,pile_button,Champ1
    reset_pile_file(pile_button)
    Bouton_arret=bouton([1541, 51],[1899, 165],"Arreter",None,"kill_label()",None)
    pile_button.empiler(Bouton_arret)
    operation1=0
    can1.after(2000,affiche_image(operation_jeux))
    can1.update()
    #Etape 1 : on génére aléatoirement 4 nombres
    a=randint(0,50)
    b=randint(0,50)
    c=randint(1,12)
    d=randint(0,50)
    e=str(a)
    f=str(b)
    g=str(c)
    h=str(d)
    #Etape 2 : on crée l'opération et on place les labels qui prendront comme valeurs les nombres générés précédemment
    operation_afficher="(("+e+"+"+f+")*"+g+")-"+h
    operation1=((a+b)*c)-d
    Text = StringVar()
    LabelResultat = Label(MaFenetre, textvariable = Text , bg ="white",font=("Courier",60),width=3,height=1)
    Text.set(e)
    LabelResultat.place(x=423,y=650)
       
    Text2 = StringVar()
    LabelResultat2 = Label(MaFenetre, textvariable = Text2 , bg ="white",font=("Courier",60),width=3,height=1)
    Text2.set(f)
    LabelResultat2.place(x=688,y=650)
        
    Text3 = StringVar()
    LabelResultat3 = Label(MaFenetre, textvariable = Text3 , bg ="white",font=("Courier",60),width=3,height=1)
    Text3.set(g)
    LabelResultat3.place(x=1064,y=650)
        
    Text4 = StringVar()
    LabelResultat4 = Label(MaFenetre, textvariable = Text4 , bg ="white",font=("Courier",60),width=3,height=1)
    Text4.set(h)
    LabelResultat4.place(x=1406,y=650)
        
    #print(operation_afficher)
    #print(operation1)
    
    #Etape 3 : on crée le champs de saisie
    Nombre1= IntVar()
    Nombre1.set(0)
    Champ1 = Entry(MaFenetre, textvariable= Nombre1, bg ="bisque", fg="maroon",font=("Courier",80),justify="center")
    Champ1.focus_set()
    Champ1.place(x=945,y=793,width=500, height=170)
    
    Bouton_rep=bouton([1470, 793],[1800, 954], "Réponse", None, "rep()", None)   
    pile_button.empiler(Bouton_rep)

def rep():
    """Cette fonction permet de récupérer la réponse de l'utilisateur dans le champs de saisie"""
    global Champ1,LabelResultat,LabelResultat2,LabelResultat3,LabelResultat4,Labelscore
    reset_pile_file(pile_button)
    
    
    Res=int(Champ1.get()) #méthode qui permet de récupérer la saisie de l'utilisateur
    #print(Res)
    LabelResultat.destroy()
    LabelResultat2.destroy()
    LabelResultat3.destroy()
    LabelResultat4.destroy()
    resultat(Res)

def resultat(reponse):
    """Cette fonction permet de vérifier la réponse de l'utilisateur et d'attribuer les points"""
    global operation1,Champ1,pile_button
    #print("bonjour")
    Champ1.destroy()
    Bouton_arret=bouton([1541, 51],[1899, 165],"Arreter",None,"fin_du_jeu()",None)
    pile_button.empiler(Bouton_arret)
    if reponse==operation1: # On vérifie si la réponse est exacte
        #print("Succès vous gagnez 15 points !")
        can1.after(0,affiche_image(quinze))
        can1.update()
        Score.set_score(15)
        actualise_score(Score)
        
    elif reponse<=operation1+15 and reponse>operation1+10: # On vérifie si la réponse est plus haute de 10 ou 15 nombres
        #print("Succès vous gagnez 1 points !")
        can1.after(0,affiche_image(unpts))
        can1.update()
        Score.set_score(1)
        actualise_score(Score)

    elif reponse<=operation1+10 and reponse>operation1+5: # On vérifie si la réponse est plus haute de 5 ou 10 nombres
        #print("Succès vous gagnez 5 points !")
        can1.after(0,affiche_image(cinqpts))
        can1.update()
        Score.set_score(5)
        actualise_score(Score)

    elif reponse<=operation1+5 and reponse>operation1: # On vérifie si la réponse est plus haute de 1 ou 5 nombres
        #print("Succès vous gagnez 10 points !")
        can1.after(0,affiche_image(dix))
        can1.update()
        Score.set_score(10)
        actualise_score(Score)

    elif reponse>=operation1-15 and reponse<operation1-10: # On vérifie si la réponse est plus basse de 10 ou 15 nombres
        #print("Succès vous gagnez 1 points !")
        can1.after(0,affiche_image(unpts))
        can1.update()
        Score.set_score(1)
        actualise_score(Score)
    
    elif reponse>=operation1-10 and reponse<operation1-5: # On vérifie si la réponse est plus basse de 5 ou 10 nombres
        #print("Succès vous gagnez 5 points !")
        can1.after(0,affiche_image(cinqpts))
        can1.update()
        Score.set_score(5)
        actualise_score(Score)
   
    elif reponse>=operation1-5 and reponse<operation1: # On vérifie si la réponse est plus basse de 1 ou 5 nombres
        #print("Succès vous gagnez 10 points !")
        can1.after(0,affiche_image(dix))
        can1.update()
        Score.set_score(10)
        actualise_score(Score)
    
    else: #On vérifie si la réponse est trop éloignée du résultat
        #print("Echec vous ne gagnez aucun points !")
        can1.after(1,affiche_image(zeropts))
        can1.update()
        Score.set_score(0)
        actualise_score(Score)


    
# ===================== FIN JEUX 1 / ECRAN AUTRE JEUX==========================
def fin_du_jeu():
    """Cette fonction permet de finir le jeu en affichant l'écran et le score de fin"""
    global Champ1,Labelscore,LabelResultat, LabelResultat2, LabelResultat3,LabelResultat4,pile_button,Score
    reset_pile_file(pile_button)
    can1.after(0,affiche_image(final))
    can1.update()
    
    Bouton_menu=bouton([1480, 504],[1811, 613],"Menu",None,"menu()",None) #création d'un bouton menu qui permet de retourner au menu
    pile_button.empiler(Bouton_menu)
    
    score1 = StringVar()
    
    Labelscore = Label(MaFenetre, textvariable = score1 , bg ="white",font=("Courier",60),width=13,height=2)
    
    score1.set(Score.get_score()) 
    Labelscore.place(x=1089,y=776) #affichage du score final
    
    Score.ajouter_score()
    
    can1.update()
    
    set_score_online()
    

def ecran_2():
    '''fonction pour jouer au jeu 1 : finit le freestyle'''
    affiche_image(fond_jeux_inexistant_2)


def ecran_3():
    affiche_image(fond_jeux_inexistant_3)


def ecran_4():
    affiche_image(fond_jeux_inexistant_4)
    
    
def ecran_5():
    affiche_image(fond_jeux_inexistant_5)
    
    
def ecran_6():
    affiche_image(fond_jeux_inexistant_6)

    
def ecran_7():
    affiche_image(fond_jeux_inexistant_7)
 
    
def ecran_8():
    affiche_image(fond_jeux_inexistant_8)
    

    
def est_bouton(lcoo:list, pile):
    '''On parcours la liste de bouton pour verifier si les axes X et Y où il y a eu le click,
    puis on regarde si cette zone est attribué à un bouton'''
    
    assert pile.vide() != True
    
    Pile2 = Pile()
    Pile_res = Pile()
    
    while pile.vide() != True :
        n = pile.depiler()
        Pile2.empiler(n)
        Pile_res.empiler(n)
    while Pile_res.vide() != True :
        m = Pile_res.depiler()
        pile_button.empiler(m)
    
    while Pile2.vide() != True:
        #print("taille de pile vaut : ", pile.taille())
        temp_memory = Pile2.depiler()
        #print(temp_memory.get_nom())
        if lcoo[0] > temp_memory.get_coo_min()[0]: #test 1 
            if lcoo[0] < temp_memory.get_coo_max()[0]: #test2
                if lcoo[1] > temp_memory.get_coo_min()[1]: # test 3
                    if lcoo[1] < temp_memory.get_coo_max()[1]: #test 4 
                        ''''puisque tous les test sont réussi, on peut afficher l'image qui est défini au bouton.
                        entre autre, on regarde le bouton que l'on testait, et puisque tout est bon, on prend l'image
                        de ce bouton et on l'affiche.'''
                        #print(temp_memory.get_nom())
                        exec(temp_memory.get_fonction())


def affiche_image(img):
    '''permet d'afficher une image sur la main-loop '''
    global can1, Bouton1, Bouton2, Bouton3, Bouton4, Bouton5, Bouton6, Bouton7,Bouton8, Bouton9, Bouton10, pile_button, bou1
    image_fond=can1.create_image(0,0,image=img,anchor="nw")

def random():
    """choisit un nombre aléatoire entre 0 et 1"""
    rand=random.randint(0,1)
    return rand

def ajouter_mail():
    """fonction qui permet d'inscire un mail dans le doc mail_joueur"""
    
    # on ouvre le bon doc et on ecrit le mail
    file = open("./doc_txt/mail_joueur.txt", 'w')
    file.write(str(mail_text.get()))
    file.close()
    
    # voir fonction : insert_if_new_user
    insert_if_new_user()
    # voir fonction : get_score_online
    get_score_online()
    
    menu2()
    
def change_user():
    """permet a l'utilisateur de changer de compte"""
    global mail_text_cu
    
    reset_pile_file(pile_button)# supprime tous les boutons
    
    can1.after(0, affiche_image(adresse_mail_image))

    # Label pour changer de mail
    mail_text_cu = Entry(MaFenetre, bg ="bisque", fg="maroon",font=("Courier",40),justify="center")
    mail_text_cu.focus_set()
    mail_text_cu.place(x=145,y=825,width=1184, height=164)
    #
    
    # valider le mail requis 
    Bouton0 = bouton([1363, 825], [1832, 989], "Bouton0", None, "change_user_next()", None)
    pile_button.empiler(Bouton0)
    #

def change_user_next():
    """on essaie de changer de mail, si la connexion ne passe pas (le mail n'est pas bon)
    on continue de jouer avec le mail précédent"""
    
    file = open("./doc_txt/mail_joueur.txt", 'r')
    email_save=""
    for elt in file :
        email_save = email_save + elt
    file.close()
    
    file = open("./doc_txt/mail_joueur.txt", 'w')
    file.write(str(mail_text_cu.get()))
    file.close()
    
    if points_new_user(email_save) == True:
        menu2()
    else :
        mauvais_mail_function()

def mauvais_mail_function() :
    """fonction qui affiche si le mail est mauvais"""
    can1.after(0, affiche_image(mauvais_mail))
    can1.after(4000, menu2())

def Clique(event):
    '''Dans cette fonction, on récupère les coordonées où a eu lieu le clique puis on les stocks
    dans la liste l, pour pouvoir utilisé ces coordonées pour les comparées ect (#est_bouton)'''
    l=[] # Création de la liste pour tout stocker 
    abscisse=event.x #Récupération de l'abscisse 
    l.append(abscisse) #Ajout de la position en abscisse a la liste 
    ordonnee=event.y #Récupération de l'ordonnee
    l.append(ordonnee) #Ajout de la position en ordonnée a la liste
    est_bouton(l, pile_button) #Ici, on envoie la liste de coordonnéesainsi que la liste des boutons dans #est_boutons
    print(l)
    
# ============================== FONCTION LISTE ===============================

def affiche_but_pile_file(pile):
    '''renvoie le nom des boutons contenus dans une liste'''
    while pile.vide() != True:
        temp_memory = pile.depiler()
        #print(temp_memory.get_nom())

def reset_pile_file(pile):
    '''réinitialise la liste donner'''
    while pile.vide() != True:
        temp_memory = pile.depiler()

def supp_bou_liste(pile, bouton_sbl:str):
    '''supprime un bouton donner dans la liste donner'''
    Pile2 = Pile()
    while pile.vide() != True :
        temp_memory = pile.depiler()
        if temp_memory.get_nom() == str(bouton_sbl) :
            pass
        else:
            Pile2.empiler(temp_memory)
    while Pile2.vide() != True :
        temp_memory = Pile2.depiler()
        pile.empiler(temp_memory)

# ========================== LANCEMENT DU PROGRAMME ===========================


pile_button = Pile()

pile_supp = Pile() #pile supplémentaire
pile_supp_2 = Pile() #pile supplémentaire

# [['t'], ['i'], ['s'], ['f'], ['t'], ['s'], ['a'], ['i'], ['s'], ['a']] : facile 

can1=Canvas(MaFenetre,width=1920,height=1080)
can1.place(x=0,y=0)

can1.focus_set()
can1.bind('<ButtonPress-1>', Clique)

menu()

MaFenetre.mainloop()

# =============================================================================
# PROGRAMME CLASS  BOUTON
# =============================================================================

class bouton :
    
    def __init__(self, coo_min, coo_max, nom, image, fonction, lettre):
        '''Fonction qui défini tous les arguments requis pour creer un objet de type #bouton '''
        self.coo_max = coo_max #coordonnées max en x et y, soit le côté gauche en haut du bouton 
        self.coo_min = coo_min #de meme pour côté droite bas
        self.image = image #On stock l'image du bouton, ce qu'il devra afficher à son activation
        self.nom = nom #On definit a qu'elle jeu il appartient pour bienn se souvenir 
        self.fonction = fonction #Permettera d'attribuer une fonction
        self.lettre = lettre
    
    def get_zone(self):
        '''renvoie la zone dans la quelle le boutton est actif '''
        return(str(self.coo_min)+ str(self.coo_max))
    
    def get_coo_min(self):
        '''renvoie les coo minimal, le coin supérieur gauche'''
        return(self.coo_min)
    
    def get_coo_max(self):
        '''Renvoie les coos du coin inférieurs bas'''
        return(self.coo_max)
    
    
    
    def get_nom(self):
        return(self.nom)
    
    def get_image(self):
        '''Renvoie l'image du bouton, ce qu'il affichera quand on appuiera dessus '''
        return(self.image)
    
    def get_lettre(self):
        return (self.lettre)
    
    
    
    def get_fonction(self):
        '''Renvoie la fonction du bouton, celle qu'il lancera quand on cliquera dessus' '''
        return(self.fonction)
    
    

    def str(self):
        '''commande magique de texte'''
        print("JEUX :" + str(self.jeux) + '\n' + "ZONE D'ACTION :" + str(self.get_zone()))

# =============================================================================
# PROGRAMME CLASS SCORE
# =============================================================================

class SCORE :
    
    def __init__(self, score):
        '''Création de score'''
        self.score = score 
    
    def set_score(self, n):
        '''On change la valeur de score'''
        self.score = self.score + n 
    
    def get_score(self):
        '''Renvoie la valeur de Score'''
        return(self.score)
    
    def ajouter_score(self):
        '''Ajoute le score dans un fichier texte'''
        
        file = open("./doc_txt/score.txt", 'r')
        score = ""
        for elt in file :
            score = score + elt
        file.close()
        if score == '' :
            file = open("./doc_txt/score.txt", 'w')
            file.write(str(0))
            file.close()
            self.ajouter_score()
        else :
            file = open("./doc_txt/score.txt", 'w')
            file.write(str(int(score)+int(self.get_score())))
            file.close()
        return True

# =============================================================================
# PROGRAMME SCORE BDD
# =============================================================================

import mysql.connector as mc

def insert_if_new_user():
    '''Fonction qui permet d'insérer une ligne dans la table resultats de la bdd
    si l'utilisateur est nouveau'''
    
    file = open("./doc_txt/mail_joueur.txt", 'r')
    email = ""
    for elt in file :
        email = email + elt
    file.close()
    
    try :
        set_coo = mc.connect(host = 'sql11.freemysqlhosting.net', database = 'sql11495727', user = 'sql11495727', password = 'Gs3xDigIDv')
        cursor = set_coo.cursor()
        
        req = 'SELECT mail_joueur FROM resultats WHERE mail_joueur = "'+str(email)+'";'
        rep = cursor.execute(req)
        
        mail = cursor.fetchall()
        
        if mail == [] :
            req2 = 'INSERT INTO resultats (id_score, mail_joueur, score) VALUES (0,"'+str(email)+'", 0);'
            cursor.execute(req2)
            
            
    except mc.Error as err:
        print(err)




def set_score_online() :
    
    file = open("./doc_txt/mail_joueur.txt", 'r')
    email = ""
    for elt in file :
        email = email + elt
    file.close()
    
    file = open("./doc_txt/score.txt", 'r')
    score = ""
    for elt in file :
        score = score + elt  
    
    try :
        set_coo = mc.connect(host = 'sql11.freemysqlhosting.net', database = 'sql11495727', user = 'sql11495727', password = 'Gs3xDigIDv')
        cursor = set_coo.cursor()
        
        req = 'SELECT mail_joueur FROM resultats WHERE mail_joueur = "'+str(email)+'";'
        rep = cursor.execute(req)
        
        mail = cursor.fetchall()
        
        if mail == "[]" :
    
            req = 'INSERT INTO resultats (id_score, mail_joueur, score) VALUES (0,"'+email+'", 0);'
            cursor.execute(req)
            
        else :
            req = 'UPDATE resultats SET score = "'+str(score)+'" WHERE mail_joueur = "'+email+'";'
            cursor.execute(req)
        
        file.close()
            
    except mc.Error as err:
     	print(err)
         
         
         
def get_score_online() :
    file = open("./doc_txt/mail_joueur.txt", 'r')
    email=''
    for elt in file :
        email = email + elt
    file.close()
    
    file = open("./doc_txt/score.txt", 'r')
    file_score = ""
    for elt in file :
        file_score = file_score + elt
    file.close()
    
    try :
        set_coo = mc.connect(host = 'sql11.freemysqlhosting.net', database = 'sql11495727', user = 'sql11495727', password = 'Gs3xDigIDv')
        cursor = set_coo.cursor()
        
        req = 'SELECT score FROM resultats WHERE mail_joueur = "'+str(email)+'";'
        rep = cursor.execute(req)
        
        online_score = cursor.fetchall()
        online_score_integer = online_score[0][0]
        # print(online_score_integer)
        
        if int(online_score_integer) > int(file_score) :
            file = open("./doc_txt/score.txt", 'w')
            file.write(str(online_score_integer))
        
        else :
            pass
        
    except mc.Error as err :
        print(err)

def points_new_user(n:str) :
    file = open("./doc_txt/mail_joueur.txt", 'r')
    email=''
    for elt in file :
        email = email + elt
    file.close()
    
    file = open("./doc_txt/score.txt", 'r')
    file_score = ""
    for elt in file :
        file_score = file_score + elt
    file.close()
    
    try :
        set_coo = mc.connect(host = 'sql11.freemysqlhosting.net', database = 'sql11495727', user = 'sql11495727', password = 'Gs3xDigIDv')
        cursor = set_coo.cursor()
        
        req0 = 'SELECT mail FROM compte WHERE mail = "'+str(email)+'";'
        rep0 = cursor.execute(req0)
        
        answ0 = cursor.fetchall()
        
        if answ0 == [] :
            file = open("./doc_txt/mail_joueur.txt", 'w')
            file.write(n)
            file.close()
            return False
        
        else :
            req = 'SELECT score FROM resultats WHERE mail_joueur = "'+str(email)+'";'
            rep = cursor.execute(req)
            
            online_score = cursor.fetchall()
            online_score_integer = online_score[0][0]
            
            file = open("./doc_txt/score.txt", 'w')
            file.write(str(online_score_integer))
            return True
                
        
    except mc.Error as err :  
        print(err)

# =============================================================================
# PROGRAMME PILE FILE 
# =============================================================================

class Pile :
    #Creéation de la classe pile 
    
    def __init__(self):
        self.liste=[]
        
    def vide(self)->bool:
        #renvoie si la liste est vide ou remplie
        if self.liste == [] :
            return (True)
        else :
            return (False)
    
    def depiler(self):
        # c'est la fonction qui va dépiler le sommet si la liste est non vide
        if self.vide() == False :
            return(self.liste.pop())
        else :
            return(None)
    
    def empiler(self,x):
        #Empile x au sommet de la PILE
        self.liste.append(x)
    
    def sommet(self):
        #renvoie le somment de la pile, sans la dépilé
        return(self.liste[-1])
    
    
    def len_pile(self):
        #Affiche le nombre d'élément dans la pile
        return(len(self.liste))
    
    def Affichage(self):
        #Affiche les element de la liste (le sommet en haut) dans la console
        print(chr(8593)+chr(8595))
        for i in range(len(self.liste)):
            print(self.liste[-i-1])
            
                
    def taille(self):
        #renvoie le nombre d'elt que contient la pile
        return len(self.liste)


class File :
    #Creéation de la classe pile 
    
    def __init__(self):
        self.liste=[]
        
    def vide(self)->bool:
        #renvoie si la liste est vide ou remplie
        if self.liste == [] :
            return (True)
        else :
            return (False)
    
    def defiler(self):
        # c'est la fonction qui va dépiler le premier element de la liste si la liste est non vide
        if self.vide() == False :
            return(self.liste.pop(0))
        else :
            return(None)
    
    def enfiler(self,x):
        #Empile x a l'entrée de la file c'est a dire a la fin de la liste
        self.liste.append(x)
    
    def sommet(self):
        #renvoie l'élément rentré en premier 
        return(self.liste[0])
    
    def len_file(self):
        #Affiche le nombre d'élément dans la file
        return(len(self.liste))
    
    def Affichage(self):
        #Affiche les element de la liste de gauche a droite 
        print("-->", end=" ")
        for i in range(len(self.liste)):
            print(self.liste[-i-1], end="")
        print(" -->")

# =============================================================================
# PROGRAMME CLASS  BOUTON
# =============================================================================

class bouton :
    
    def __init__(self, coo_min, coo_max, nom, image, fonction, lettre):
        '''Fonction qui défini tous les arguments requis pour creer un objet de type #bouton '''
        self.coo_max = coo_max #coordonnées max en x et y, soit le côté gauche en haut du bouton 
        self.coo_min = coo_min #de meme pour côté droite bas
        self.image = image #On stock l'image du bouton, ce qu'il devra afficher à son activation
        self.nom = nom #On definit a qu'elle jeu il appartient pour bienn se souvenir 
        self.fonction = fonction #Permettera d'attribuer une fonction
        self.lettre = lettre
    
    def get_zone(self):
        '''renvoie la zone dans la quelle le boutton est actif '''
        return(str(self.coo_min)+ str(self.coo_max))
    
    def get_coo_min(self):
        '''renvoie les coo minimal, le coin supérieur gauche'''
        return(self.coo_min)
    
    def get_coo_max(self):
        '''Renvoie les coos du coin inférieurs bas'''
        return(self.coo_max)
    
    
    
    def get_nom(self):
        return(self.nom)
    
    def get_image(self):
        '''Renvoie l'image du bouton, ce qu'il affichera quand on appuiera dessus '''
        return(self.image)
    
    def get_lettre(self):
        return (self.lettre)
    
    
    
    def get_fonction(self):
        '''Renvoie la fonction du bouton, celle qu'il lancera quand on cliquera dessus' '''
        return(self.fonction)
    
    

    def str(self):
        '''commande magique de texte'''
        print("JEUX :" + str(self.jeux) + '\n' + "ZONE D'ACTION :" + str(self.get_zone()))

# =============================================================================
# PROGRAMME CLASS SCORE
# =============================================================================

class SCORE :
    
    def __init__(self, score):
        '''Création de score'''
        self.score = score 
    
    def set_score(self, n):
        '''On change la valeur de score'''
        self.score = self.score + n 
    
    def get_score(self):
        '''Renvoie la valeur de Score'''
        return(self.score)
    
    def ajouter_score(self):
        '''Ajoute le score dans un fichier texte'''
        
        file = open("./doc_txt/score.txt", 'r')
        score = ""
        for elt in file :
            score = score + elt
        file.close()
        if score == '' :
            file = open("./doc_txt/score.txt", 'w')
            file.write(str(0))
            file.close()
            self.ajouter_score()
        else :
            file = open("./doc_txt/score.txt", 'w')
            file.write(str(int(score)+int(self.get_score())))
            file.close()
        return True

# =============================================================================
# PROGRAMME SCORE BDD
# =============================================================================

import mysql.connector as mc

def insert_if_new_user():
    '''Fonction qui permet d'insérer une ligne dans la table resultats de la bdd
    si l'utilisateur est nouveau'''
    
    file = open("./doc_txt/mail_joueur.txt", 'r')
    email = ""
    for elt in file :
        email = email + elt
    file.close()
    
    try :
        set_coo = mc.connect(host = 'sql11.freemysqlhosting.net', database = 'sql11495727', user = 'sql11495727', password = 'Gs3xDigIDv')
        cursor = set_coo.cursor()
        
        req = 'SELECT mail_joueur FROM resultats WHERE mail_joueur = "'+str(email)+'";'
        rep = cursor.execute(req)
        
        mail = cursor.fetchall()
        
        if mail == [] :
            req2 = 'INSERT INTO resultats (id_score, mail_joueur, score) VALUES (0,"'+str(email)+'", 0);'
            cursor.execute(req2)
            
            
    except mc.Error as err:
        print(err)




def set_score_online() :
    
    file = open("./doc_txt/mail_joueur.txt", 'r')
    email = ""
    for elt in file :
        email = email + elt
    file.close()
    
    file = open("./doc_txt/score.txt", 'r')
    score = ""
    for elt in file :
        score = score + elt  
    
    try :
        set_coo = mc.connect(host = 'sql11.freemysqlhosting.net', database = 'sql11495727', user = 'sql11495727', password = 'Gs3xDigIDv')
        cursor = set_coo.cursor()
        
        req = 'SELECT mail_joueur FROM resultats WHERE mail_joueur = "'+str(email)+'";'
        rep = cursor.execute(req)
        
        mail = cursor.fetchall()
        
        if mail == "[]" :
    
            req = 'INSERT INTO resultats (id_score, mail_joueur, score) VALUES (0,"'+email+'", 0);'
            cursor.execute(req)
            
        else :
            req = 'UPDATE resultats SET score = "'+str(score)+'" WHERE mail_joueur = "'+email+'";'
            cursor.execute(req)
        
        file.close()
            
    except mc.Error as err:
     	print(err)
         
         
         
def get_score_online() :
    file = open("./doc_txt/mail_joueur.txt", 'r')
    email=''
    for elt in file :
        email = email + elt
    file.close()
    
    file = open("./doc_txt/score.txt", 'r')
    file_score = ""
    for elt in file :
        file_score = file_score + elt
    file.close()
    
    try :
        set_coo = mc.connect(host = 'sql11.freemysqlhosting.net', database = 'sql11495727', user = 'sql11495727', password = 'Gs3xDigIDv')
        cursor = set_coo.cursor()
        
        req = 'SELECT score FROM resultats WHERE mail_joueur = "'+str(email)+'";'
        rep = cursor.execute(req)
        
        online_score = cursor.fetchall()
        online_score_integer = online_score[0][0]
        # print(online_score_integer)
        
        if int(online_score_integer) > int(file_score) :
            file = open("./doc_txt/score.txt", 'w')
            file.write(str(online_score_integer))
        
        else :
            pass
        
    except mc.Error as err :
        print(err)

def points_new_user(n:str) :
    file = open("./doc_txt/mail_joueur.txt", 'r')
    email=''
    for elt in file :
        email = email + elt
    file.close()
    
    file = open("./doc_txt/score.txt", 'r')
    file_score = ""
    for elt in file :
        file_score = file_score + elt
    file.close()
    
    try :
        set_coo = mc.connect(host = 'sql11.freemysqlhosting.net', database = 'sql11495727', user = 'sql11495727', password = 'Gs3xDigIDv')
        cursor = set_coo.cursor()
        
        req0 = 'SELECT mail FROM compte WHERE mail = "'+str(email)+'";'
        rep0 = cursor.execute(req0)
        
        answ0 = cursor.fetchall()
        
        if answ0 == [] :
            file = open("./doc_txt/mail_joueur.txt", 'w')
            file.write(n)
            file.close()
            return False
        
        else :
            req = 'SELECT score FROM resultats WHERE mail_joueur = "'+str(email)+'";'
            rep = cursor.execute(req)
            
            online_score = cursor.fetchall()
            online_score_integer = online_score[0][0]
            
            file = open("./doc_txt/score.txt", 'w')
            file.write(str(online_score_integer))
            return True
                
        
    except mc.Error as err :  
        print(err)

# =============================================================================
# PROGRAMME PILE FILE 
# =============================================================================

class Pile :
    #Creéation de la classe pile 
    
    def __init__(self):
        self.liste=[]
        
    def vide(self)->bool:
        #renvoie si la liste est vide ou remplie
        if self.liste == [] :
            return (True)
        else :
            return (False)
    
    def depiler(self):
        # c'est la fonction qui va dépiler le sommet si la liste est non vide
        if self.vide() == False :
            return(self.liste.pop())
        else :
            return(None)
    
    def empiler(self,x):
        #Empile x au sommet de la PILE
        self.liste.append(x)
    
    def sommet(self):
        #renvoie le somment de la pile, sans la dépilé
        return(self.liste[-1])
    
    
    def len_pile(self):
        #Affiche le nombre d'élément dans la pile
        return(len(self.liste))
    
    def Affichage(self):
        #Affiche les element de la liste (le sommet en haut) dans la console
        print(chr(8593)+chr(8595))
        for i in range(len(self.liste)):
            print(self.liste[-i-1])
            
                
    def taille(self):
        #renvoie le nombre d'elt que contient la pile
        return len(self.liste)


class File :
    #Creéation de la classe pile 
    
    def __init__(self):
        self.liste=[]
        
    def vide(self)->bool:
        #renvoie si la liste est vide ou remplie
        if self.liste == [] :
            return (True)
        else :
            return (False)
    
    def defiler(self):
        # c'est la fonction qui va dépiler le premier element de la liste si la liste est non vide
        if self.vide() == False :
            return(self.liste.pop(0))
        else :
            return(None)
    
    def enfiler(self,x):
        #Empile x a l'entrée de la file c'est a dire a la fin de la liste
        self.liste.append(x)
    
    def sommet(self):
        #renvoie l'élément rentré en premier 
        return(self.liste[0])
    
    def len_file(self):
        #Affiche le nombre d'élément dans la file
        return(len(self.liste))
    
    def Affichage(self):
        #Affiche les element de la liste de gauche a droite 
        print("-->", end=" ")
        for i in range(len(self.liste)):
            print(self.liste[-i-1], end="")
        print(" -->")
        
        
# =============================================================================
# SITE INTERNET !
# =============================================================================


# =============================================================================
# INDEX./ ACCUEIL
# =============================================================================

<!DOCTYPE html>
<html>
	<head>
	<title>FAC - Corp</title>
        <meta http-equiv="content-type" content="text/html"; charset="utf-8" />
		<link href="style.css" rel="stylesheet" media="all" type="text/css">
	</head>
	
	<body> 
        </div>
		<div>
			<img src="images/FAC-CorpLOGO.png">
		</div>
		<nav>
	        <ul>
	            <li><a href="index.php">Accueil</a></li>
	            <li><a href="Actualite.html">Actualités</a></li>
	            <li><a href="nos_jeux.php">Nos Jeux</a></li>
	            <li><a href="resultat.php">Résultats / Scores</a></li>
	            <li><a href="profil.php">Profil</a></li>
	        </ul>
 		</nav>
 		<div class="q1">
	 		<h1 align="center">
	 			Qui sommes nous ?
	 		</h1>
	 	</div>
	 	<div class="q1v2">
	 		<p>
	 			Nous sommes un groupes de trois étudiants en terminale
	 			au lycée Renée Cassin, </p><p>tous les trois dopé à la NSI et 
	 			l'informatique.
	 		</p>
	 	</div>
	</body>
</html>

#==============================================================================
# ACTUALITÉES
#==============================================================================

<!DOCTYPE html>
<html>
	<head>
		<title>Actualité</title>
		<link href="style.css" rel="stylesheet" media="all" type="text/css">
		<meta http-equiv="content-type" content="text/html"; charset="utf-8" />
	</head>
	
	<body> 
		<div>
			<img src="images/FAC-CorpLOGO.png">
		</div>
		<nav>
	        <ul>
	            <li><a href="index.php">Accueil</a></li>
	            <li><a href="Actualite.html">Actualités</a></li>
	            <li><a href="nos_jeux.php">Nos Jeux</a></li>
	            <li><a href="resultat.php">Résultats / Scores</a></li>
	            <li><a href="profil.php">Profil</a></li>
	        </ul>
 		</nav>
 		<div class="q2">
	 		<h1>
	 			Bonjour et bienvenue sur la page de toutes les dernières actualités ! 
	 		</h1>
	 	</div>
	 	<div class="q2v2">
	 		<p>Sur cette page, vous trouverez toutes les dernières nouvelles / actualitées</p> 
	 	</div>

	 	<div class="q2">
	 		<h1>
	 			Cabochard et son Renekton retourne EGN 
	 		</h1>	
	 	</div>
	 	<div class="q2v3">
	 		<iframe src="https://clips.twitch.tv/embed?clip=VibrantAnimatedLatteSquadGoals-INue2y1uaYpqQnZw&parent=www.example.com" frameborder="0" allowfullscreen="true" scrolling="no" height="378" width="620"></iframe>
	 	</div>


	 	<div class="q2">
	 		<h1>
	 			Un départ parfait pour la Karmine dans les EU Master 2022
	 		</h1>
	 	</div>

	 	<div class="q2v3">
	 		<blockquote class="twitter-tweet" align="center" ><p lang="fr" dir="ltr" align="center">6-0. Top 1 du groupe D. La <a align="center" href="https://twitter.com/hashtag/KCORP?src=hash&amp;ref_src=twsrc%5Etfw">#KCORP</a> est de retour.<br><br>GGWP <a align="center" href="https://twitter.com/Zero_Tenacity?ref_src=twsrc%5Etfw">@Zero_Tenacity</a> 🤝 <a href="https://t.co/pZByggjqzy">pic.twitter.com/pZByggjqzy</a></p>&mdash; Karmine Corp (@KarmineCorp) <a align="center" href="https://twitter.com/KarmineCorp/status/1511441947214368779?ref_src=twsrc%5Etfw">April 5, 2022</a></blockquote> <script align="center" async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
	 	</div>

	 	<div class="q2">
	 		<h1>
	 			Élimination de la KC dans la LFL 2022
	 		</h1>
	 	</div>
	 	<div class="q2v2">
	 		<img class='kc' src="images/karmine.jpeg">
	 		<h1>
	 			Suite à la défaite contre LDLC (3|0) ainsi que la défaite contre BDSA (3|1),
	 			la karmine nous quitte pour cette fin de saison.
	 		</h1>

	 	</div>
	 	<div class="q2">
	 		<h1>
	 			Une sortie de tournoi pour la Karmine Corp ?
	 		</h1>
	 	</div>
	 	<div class="q2v2">
	 		<img class='kc' src="images/kc.jpg">
	 		<h1>
	 			Après un 3 | 0 Cuisant contre LDLC, c'est contre BDS-Académie que KC va jouer son plausible ultime match. 
	 			La team vainqueur affrontera LDLC en final.
	 		</h1>
	 	</div>
	</body>
</html>

#==============================================================================
# NOS JEUX 
#==============================================================================


<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr" lang="fr">
    <head>
        
        <meta http-equiv="content-type" content="text/html"; charset="utf-8" />
        <title>Nos jeux</title>
    <link href="style.css" rel="stylesheet" media="all" type="text/css">
    </head>
    <body>
        <div>
            <img src="images/FAC-CorpLOGO.png">
        </div>
        <nav>
            <ul>
                <li><a href="index.php">Accueil</a></li>
                <li><a href="Actualite.html">Actualités</a></li>
                <li><a href="nos_jeux.php">Nos Jeux</a></li>
                <li><a href="resultat.php">Résultats / Scores</a></li>
                <li><a href="profil.php">Profil</a></li>
            </ul>
        </nav>
        <div class="boutondl">
	        <fieldset class="boutondl">
	        	<legend> Télécharger notre launcher (1920x1080) ! </legend>
	        	<a href="connexiondl.php"><img src="./images/boutondl.png" class="boutondl"></a>
	        </fieldset>

            <fieldset class="boutondl">
	        	<legend> Télécharger notre launcher (Version universelle) ! </legend>
	        	<a href="connexiondl_universel.php"><img src="./images/boutondl.png" class="boutondl"></a>
                <p class="avert">Cette version a été réalisé dans l'idée que vous puissiez y jouer sur n'importe quelle écran. Ceci dit, nous vous conseillons d'éviter de mettre le jeux en plein écran, cordialement, l'équipe FAC</p>
	        </fieldset>
	    </div>
    </body>
</html>

#==============================================================================
# RESULTATS / SCORE 
#==============================================================================

<!DOCTYPE html>
<html>
	<head>
	<title>Resultats</title>
        <meta http-equiv="content-type" content="text/html"; charset="utf-8" />
		<link href="style.css" rel="stylesheet" media="all" type="text/css">
	</head>
	<body> 
        </div>
		<div>
			<img src="images/FAC-CorpLOGO.png">
		</div>
		<nav>
	        <ul>
	            <li><a href="index.php">Accueil</a></li>
	            <li><a href="Actualite.html">Acutalité</a></li>
	            <li><a href="nos_jeux.php">Nos Jeux</a></li>
	            <li><a href="resultat.php">Resultats / Scores</a></li>
	            <li><a href="profil.php">Profil</a></li>
	        </ul>
 		</nav>
 		<h2>
 			Ici sont présent, les résultats de tous les joueurs
 		</h2>

 		<?php
		// on se connecte à la base
		$base = new mysqli('sql11.freemysqlhosting.net', 'sql11495727', 'Gs3xDigIDv','sql11495727');
		//commandes SQL d'insertion, valeur 0 pour auto incrémentation

		$sql = 'SELECT id_score, pseudo, score FROM compte JOIN resultats ON compte.mail = resultats.mail_joueur ORDER BY score DESC';	
		// On lance la requête (mysql_query) 
        $req = $base->query($sql); // la flèche fonctionne comme le point en python en POO
		if ($req)  // si la requete passe
		{ 
			echo '<table>
					<tr> 
						<th>id_score</th>
						<th>Pseudo</th>
						<th>Score </th>
					</tr> ';

			while ($data = mysqli_fetch_array($req)) {
				//on scanne les lignes de la liste obtenue
				//avec la requete, chaque colonne est
				//repérée par le nom de la colonne dans la BDD
				echo 
					'<tr>
						<td>'.utf8_encode($data["id_score"]).'</td>
						<td>'.utf8_encode($data["pseudo"]).'</td>
						<td>'.utf8_encode($data["score"]).'</td>
					</tr>'; 
			}
		echo '</table>';
		}
		else //si erreur 
		{
			echo '<p>Erreur SQL !<br />'.$base->error.'</p>';
		} 
		//on ferme la connexion à la base
        mysqli_close ($base);
		
		?>	
 	</body>
</html>

#==============================================================================
# PROFIL 
#==============================================================================

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr" lang="fr">
    <head>
        
        <meta http-equiv="content-type" content="text/html"; charset="utf-8" />
        <title>Connexion a votre compte</title>
    <link href="style.css" rel="stylesheet" media="all" type="text/css">
    </head>
    <body>
        <div>
            <img src="images/FAC-CorpLOGO.png">
        </div>
        <nav>
            <ul>
                <li><a href="index.php">Accueil</a></li>
                <li><a href="Actualite.html">Actualité</a></li>
                <li><a href="nos_jeux.php">Nos Jeux</a></li>
                <li><a href="resultat.php">Resultats / Scores</a></li>
                <li><a href="profil.php">Profil</a></li>
            </ul>
        </nav>

    	<h2 class="titre" align="center">Connectez vous, ou créer votre Espace Personel</h2>
        
        <fieldset class="fieldset-inscr-content">
            <form action="verification.php" method="POST">
                <fieldset class="inscr-box1">
                    <legend>Connexion a mon compte</legend>
                    <h2 class="compte">
                        Adresse E-mail :<br /><input type="text" name="mail" class="cases" placeholder="Entrer le mail" required/><br/>
                        Mot de passe :<br /><input type="password" name="pwd" class="cases" placeholder="Entrer le mot de passe" required/><br/>
                    </h2>

                    <input type="submit" id="submit" name="valider" value="Je me connecte" class="test" size="20px" />

                    <?php
                    if(isset($_GET['erreur'])){
                        $err = $_GET['erreur'];
                        if($err==1 || $err==2) 
                        {
                            echo "<p style='color:red'>Utilisateur ou mot de passe incorrect</p>";
                        }
                    }   
                    ?>

                </fieldset>
            </form>


            <form action="inscription.php" method="POST">
                <fieldset>
                    <legend> Je ne possède pas de compte :</legend>
                    <input type="submit" value="J'en creer un !" class="pas_compte" size="20px"/>
                </fieldset>
            </form>
        </fieldset>
    </body>
</html>

#==============================================================================
# Connexion au profile 
#==============================================================================

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr" lang="fr">
    <head>
        
        <meta http-equiv="content-type" content="text/html"; charset="utf-8" />
        <title>Profil personnel</title>
    <link href="style.css" rel="stylesheet" media="all" type="text/css">
    </head>
    <body>
        <div>
            <img src="images/FAC-CorpLOGO.png">
        </div>
        <nav>
            <ul>
                <li><a href="index.php">Accueil</a></li>
                <li><a href="Actualite.html">Actualités</a></li>
                <li><a href="nos_jeux.php">Nos Jeux</a></li>
                <li><a href="resultat.php">Résultats / Scores</a></li>
                <li><a href="profil.php">Profil</a></li>
                <li class="bouton_logout"><a href='profilconnect.php?deconnexion=true'><img src="./images/logout.png" class="bouton_logout"></a></li>
            </ul>
        </nav>
        <!-- tester si l'utilisateur est connecté -->
        <div>
        <?php
            session_start(); //On lance une session
            if(isset($_GET['deconnexion'])){ //Si il existe une variable $_GET['deconnxion'] et qu'elle est définie alors
                if($_GET['deconnexion']==true){  
                    session_unset(); //On ferme la session 
                    header("location:profil.php"); // On renvoie sur la page de conexion
                }
            }
            if($_SESSION['mail'] !== "")//si la variable $_SESSION['mail'] n'est pas null
            { 
                $user = $_SESSION['mail'];
                // afficher un message
                $base = new mysqli('sql11.freemysqlhosting.net', 'sql11495727', 'Gs3xDigIDv','sql11495727');
                $sql2 = 'SELECT prenom FROM compte WHERE mail = "'.$user.'"';
                $req2 = $base->query($sql2);
                if($req2)
                {
                    $data = mysqli_fetch_array($req2);
                    echo '<p>Bonjour '.utf8_encode($data['prenom']).', vous êtes désormais connecté!</p>'; 
                }
            }
            else {
                echo '<p>Erreur SQL !<br />'.$base->error.'</p>';
            }
            mysqli_close ($base);
        ?>   
        <div class="boutondl">
            <?php
            // on se connecte à la base
            $base = new mysqli('sql11.freemysqlhosting.net', 'sql11495727', 'Gs3xDigIDv','sql11495727');
            //commandes SQL d'insertion, valeur 0 pour auto incrémentation

            $sql = 'SELECT pseudo, score FROM compte JOIN resultats ON compte.mail = resultats.mail_joueur WHERE mail="'.utf8_encode($_SESSION["mail"]).'"'; 
            // On lance la requête (mysql_query) 
            $req = $base->query($sql); // la flèche fonctionne comme le point en python en POO
            if ($req)  // si la requete passe
            { 
                echo '<fieldset class="score_account"><legend>Score :</legend>';
                while ($data = mysqli_fetch_array($req)) {
                    //on scanne les lignes de la liste obtenue
                    //avec la requete, chaque colonne est
                    //repérée par le nom de la colonne dans la BDD
                    echo 'Bonjour '.utf8_encode($data["pseudo"]).' votre score est de : '.utf8_encode($data["score"]).'pts actuellement.'; 
                }
            echo '</fieldset>';
            }
            else //si erreur 
            {
                echo '<p>Erreur SQL !<br />'.$base->error.'</p>';
            } 
            //on ferme la connexion à la base
            mysqli_close ($base);
            
            ?>  
        </div>
    </body>
</html>

#==============================================================================
# Verification 
#==============================================================================

<?php
session_start();
if(isset($_POST['mail']) and isset($_POST['pwd']))
{
    // connexion à la base de données
    $base = new mysqli('sql11.freemysqlhosting.net', 'sql11495727', 'Gs3xDigIDv','sql11495727');
    
    // on applique les deux fonctions mysqli_real_escape_string et htmlspecialchars
    // pour éliminer toute attaque de type injection SQL et XSS
    $mail = mysqli_real_escape_string($base,htmlspecialchars($_POST['mail'])); 
    $pwd = mysqli_real_escape_string($base,htmlspecialchars($_POST['pwd']));

    // Si les deux infos de sont pas vides 
    if($mail !== "" && $pwd !== "")
    {
        $requete = "SELECT count(*) FROM compte WHERE mail = '".$mail."' and mdp = '".$pwd."' ";
        $exec_requete = mysqli_query($base,$requete);
        $reponse      = mysqli_fetch_array($exec_requete);
        $count = $reponse['count(*)'];
        if($count!=0) // nom d'utilisateur et mot de passe correctes
        {
            $_SESSION['mail'] = $mail;
            header('Location: profilconnect.php');
        }
        else
        {
           header('Location: profil.php'); // utilisateur ou mot de passe incorrect
           echo "Mail ou mot de passe invalide";
        }
    }
    else
    {
       header('Location: profil.php'); // utilisateur ou mot de passe vide
       echo "Une case n'a pas été complété";
    }
}
else
{
   header('Location:profil.php');
}
mysqli_close($base); // fermer la connexion
?>

#==============================================================================
# Inscription 
#==============================================================================

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr" lang="fr">
    <head>
        
        <meta http-equiv="content-type" content="text/html"; charset="utf-8" />
        <title>Formulaire de saisie utilisateur</title>
    <link href="style.css" rel="stylesheet" media="all" type="text/css">
    </head>
    <body>
        <div>
            <img src="images/FAC-CorpLOGO.png">
        </div>
        <nav>
            <ul>
	            <li><a href="index.php">Accueil</a></li>
	            <li><a href="Actualite.html">Actualités</a></li>
	            <li><a href="nos_jeux.php">Nos Jeux</a></li>
	            <li><a href="resultat.php">Résultats / Scores</a></li>
	            <li><a href="Profil.php">Profil</a></li>
            </ul>
        </nav>

		<h2 class="titre_inscr"><u>Voici le formulaire d'inscription suite à votre demande de création</u></h2>

		<br>
		
		<form name="inscription" method="post" action="inscription.php">

			<fieldset class="fieldset-inscr-content">
				<fieldset class="inscr-box1">
					<legend> Vos Cordonees </legend>
					Nom : <br> <input type="text" name="nom" class="cases"> <br>
					Prenom : <br> <input type="text" name="prenom" class="cases"><br>
					Mail : <br> <input type="texte" name="mail" class="cases"><br>
					Mot de passe : <br> <input type="text" name="mdp1" class="cases"><br>
					Mot de passe - Vérif : <br> <input type="text" name="mdp2" class="cases"><br>
					Pays : <br> <input type="text" name="pays" class="cases"><br>
					Ville : <br> <input type="text" name="ville" class="cases"><br>
				</fieldset>
				<fieldset class="inscr-box3">
					<fieldset class="inscr-box2">	
						<legend> Votre Visibilitée : </legend>
						Pseudo : <br> <input type="text" name="pseudo"  class="cases"/><br>
					</fieldset>
					<input type="submit" name="valider" value="Inscription" class="pas_compte2" />
				</fieldset>
			</fieldset>
		</form>

		<?php
		$base = new mysqli('sql11.freemysqlhosting.net', 'sql11495727', 'Gs3xDigIDv','sql11495727');

		if (isset ($_POST['valider'])) {
			//on récupère les valeurs entrées par l'utilisateur
			$nom=$_POST['nom'];
			$prenom=$_POST['prenom'];
			$mail=$_POST['mail'];
			$mdp=$_POST['mdp1'];
			$mdp2=$_POST['mdp2'];
			$pays=$_POST['pays'];
			$ville=$_POST['ville'];
			$pseudo=$_POST['pseudo'];

			if ($_POST['mdp1'] != $_POST['mdp2']) // On test les mdp pour voir si ils sont différent
			{ 
				$erreur = "les deux mots de passes sont différents ! ";
				echo $erreur; exit();
			}

			//commandes SQL d'insertion, valeur 0 pour auto incrémentation
			$sql = 'INSERT INTO compte VALUES("'.utf8_encode($mail).'","'.utf8_encode($nom).'","'.utf8_encode($prenom).'","'.utf8_encode($pays).'","'.utf8_encode($ville).'","'.utf8_encode($pseudo).'","'.utf8_encode($mdp).'")';
			// On lance la requête (mysql_query) 
	        $req = $base->query($sql); // la flèche fonctionne comme le point en python en POO
			if (!$req)   // si la requete a envoyé une erreur
			{echo '<p>Erreur SQL !<br />'.$base->error.'</p>';}

			header('location:index.php');
        }

		//on ferme la connexion à la base
        mysqli_close ($base);

		?>	
    </body>
</html>


#==============================================================================
# Pages téléchargement jeux 
#==============================================================================

Universelle
<?php
session_start();
if(isset($_SESSION['mail'])) {
	header("location:https://www.mediafire.com/file/ne9npbye78d5py8/Projet_FAC_Universel.rar/file");
}	
else {
	header("location:connexion.php");
}
?>

1920 x 1080
<?php
session_start();
if(isset($_SESSION['mail'])) {
	header("location:https://www.mediafire.com/file/aiqxhdljc8vgel9/projet_fac_dl.rar/file");
}	
else {
	header("location:connexion.php");
}
?>

#==============================================================================
#DECONEXION
#==============================================================================

<?php
session_start();
if(isset($_SESSION['mail'])
{
	session_destroy();
}

header("location : index.php");
?>

#==============================================================================
# Feuille CSS 
#==============================================================================

body {
	background-color: #c8e8ee;
}

ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    overflow: hidden;
    background-color: #005868;
}

li {
    float: left;
    font-size: 1.6em;
}

li.bouton_logout {
    float: right;
}

li a {
    display: block;
    color: #D7BDE2;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
}

li a:hover{
    transform: scale(1.075);
    background-color:#D7BDE2 ;
    color:#005868 ;
    transition: 400ms ease-in-out;
}

a {
    text-align: right;
}

a.boutondeco {
    margin-left: 80%;
    margin-top: 90%;
    text-align: center;
}

p {
    font-size: 30px;
    color:#005868;
}

fieldset p.avert {
    float: left;
}

div.boutondeco  {
    text-align: right;
}

h2.titre{
    color:#005868;
}

h2.titre_inscr{
    text-align: center;
    color: #005868;
}
.compte {
    font-size: 20px;
}

legend {
    color: #005868;
    font-size: 22px;
    text-align: left;
}

fieldset {
    color: #005868;
    margin-right: 25px;
    margin-left: 25px;
    margin-top: 25px;
    margin-bottom: 25px; 
    border-color: #005868;
    width: 300px
}

fieldset.score_account {
    float: left;
    text-align: left;
    margin:0 auto; 
    color: #005868;
    border-color: #005868;
    width: 375px;
}

fieldset.fieldset-inscr-content {
    margin:0 auto;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
}

fieldset.inscr-box2 {
    height: 70px;
}

fieldset.inscr-box3 {
    color: #005868;
    border-color:#005868;
}

input.test {
    margin-left: 25%;
    margin-top: 10%;
    color: #D7BDE2 ;
    text-align: center;
    border-radius: 15px;
    background-color: #005868;
    font-size: 30px;
}

input.pas_compte {
    margin-left: 30%;
    margin-top: 50%;
    color: #D7BDE2 ;
    text-align: center;
    border-radius: 15px;
    background-color: #005868;
    font-size: 30px;
}

input.pas_compte2 {
    margin-left: 60%;
    margin-top: 35%;
    color: #D7BDE2 ;
    text-align: center;
    border-radius: 15px;
    background-color: #005868;
    font-size: 30px;
}

div {
    text-align: center;
}

div.q1 {
    text-align: left;
    display: block;
    color: #D7BDE2;
    background-color: #005868;
    margin-right: 60%;
    margin-bottom: -25px;
}
div.q1v2 {
    text-align: left;
    display: block;
    color: #005868;
    background-color: #D7BDE2;
    margin-right: 60%;
    margin-top: 25px;
    padding:0 auto;
}


div.q2 {
    text-align: center;
    display: block;
    color: #D7BDE2;
    background-color: #005868;
    border-top-right-radius: 15px;
    border-top-left-radius: 15px;
    margin-right: 60%;
    margin-top: 25px;
    padding: 1px ;
}

div.q2v2 {
    text-align: center;
    display: block;
    color: #005868;
    background-color: #D7BDE2;
    margin-right: 60%;
    margin-top: -15px;
    padding: 0.1em ;
}


div.q2v3 {
    justify-content: center;
    display: block;
    color: #005868;
    background-color: #D7BDE2;
    margin-right: 60%;
    margin-top: -15px;
    padding: 0.1em ;
}

div.q6 {
    text-align: center;
    display: block;
    color: #D7BDE2;
    background-color: #005868;
    margin-right: 60%;
    margin-top: 25px;
    padding: 1px ;
}

div.boutondl {
    text-align: right;
    display: block;
}

div.bouton_logout {
    text-align: right;
}

img.kc {
    width: 80%;
    height: 80%;
}


img.boutondl {
    width:35em;
    height:10em;
}

img.bouton_logout {
    text-align: right;
    width:100%;
    height:3%;
}

